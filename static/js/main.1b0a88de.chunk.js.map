{"version":3,"sources":["audio/bell.mp3","components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BreakInterval","props","id","className","onClick","breakInterval","decreaseBreak","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","useState","isSession","setIsSession","isActive","setIsActive","timerSec","setTimerSec","decreaseTimer","timerMin","document","getElementById","play","prevState","toggleInterval","updateTimerMin","useEffect","interval","setTimeout","clearTimeout","dateTime","audio","querySelector","pause","currentTime","stopAudio","resetTimer","src","Bell","type","App","breakLength","setBreakLength","setSessionLength","setTimerMin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b0a88de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.92dcad24.mp3\";","import React from \"react\";\r\n\r\nexport const BreakInterval = (props) => {\r\n  function decreaseCounter() {\r\n    if (props.breakInterval === 1) {\r\n      return;\r\n    }\r\n    props.decreaseBreak();\r\n  }\r\n\r\n  function increaseCounter() {\r\n    if (props.breakInterval === 60) {\r\n      return;\r\n    }\r\n    props.increaseBreak();\r\n  }\r\n\r\n  return (\r\n    <div id=\"break\">\r\n      <h2 id=\"break-label\">Break Length</h2>\r\n      <div className=\"plusMin\">\r\n        <button\r\n          id=\"break-decrement\"\r\n          className=\"symbol\"\r\n          onClick={decreaseCounter}\r\n        >\r\n          -\r\n        </button>\r\n        <p id=\"break-length\">{props.breakInterval}</p>\r\n        <button\r\n          id=\"break-increment\"\r\n          className=\"symbol\"\r\n          onClick={increaseCounter}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const SessionLength = (props) => {\r\n  function decreaseSession() {\r\n    if (props.sessionLength === 1) {\r\n      return;\r\n    }\r\n    props.decreaseSession();\r\n  }\r\n\r\n  function increaseSession() {\r\n    if (props.sessionLength === 60) {\r\n      return;\r\n    }\r\n    props.increaseSession();\r\n  }\r\n  return (\r\n    <div id=\"session\">\r\n      <h2 id=\"session-label\">Session Length</h2>\r\n      <div className=\"plusMin\">\r\n        <button\r\n          id=\"session-decrement\"\r\n          className=\"symbol\"\r\n          onClick={decreaseSession}\r\n        >\r\n          -\r\n        </button>\r\n        <p id=\"session-length\">{props.sessionLength}</p>\r\n        <button\r\n          id=\"session-increment\"\r\n          className=\"symbol\"\r\n          onClick={increaseSession}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Bell from \"../audio/bell.mp3\";\r\n\r\nexport const Timer = (props) => {\r\n  const [isSession, setIsSession] = useState(() => true);\r\n  const [isActive, setIsActive] = useState(() => false);\r\n  const [timerSec, setTimerSec] = useState(() => 0);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setTimeout(decreaseTimer, 1000);\r\n      return () => clearTimeout(interval);\r\n    }\r\n    return undefined;\r\n  }, [isActive, timerSec, props.timerMin]);\r\n\r\n  function decreaseTimer() {\r\n    switch (timerSec) {\r\n      case 1:\r\n        if (props.timerMin === 0) {\r\n          document.getElementById(\"beep\").play();\r\n          setTimerSec((prevState) => prevState - 1);\r\n        }\r\n        break;\r\n      case 0:\r\n        if (props.timerMin === 0) {\r\n          if (isSession) {\r\n            setIsSession(false);\r\n            props.toggleInterval(isSession);\r\n          } else {\r\n            setIsSession(true);\r\n            props.toggleInterval(isSession);\r\n          }\r\n        } else {\r\n          setTimerSec(59);\r\n          props.updateTimerMin();\r\n        }\r\n        break;\r\n      default:\r\n        setTimerSec((prevState) => prevState - 1);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function toggleTimer() {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  function stopAudio() {\r\n    const audio = document.querySelector(\"#beep\");\r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n  }\r\n\r\n  function resetTimer() {\r\n    setIsSession(true);\r\n    setIsActive(false);\r\n    setTimerSec(0);\r\n    stopAudio();\r\n    props.resetTimer();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"timer\">\r\n        <h2 id=\"timer-label\">{isSession === true ? \"Session\" : \"Break\"}</h2>\r\n        <time id=\"time-left\" dateTime=\"mm:ss\">\r\n          <span>\r\n            {props.timerMin === 0\r\n              ? \"00\"\r\n              : props.timerMin < 10\r\n              ? \"0\" + props.timerMin\r\n              : props.timerMin}\r\n          </span>\r\n          <span>:</span>\r\n          <span>\r\n            {timerSec === 0 ? \"00\" : timerSec < 10 ? \"0\" + timerSec : timerSec}\r\n          </span>\r\n        </time>\r\n      </div>\r\n      <div id=\"controls\">\r\n        <div id=\"start_stop\" onClick={toggleTimer}>\r\n          play/pause\r\n        </div>\r\n        <div id=\"reset\" onClick={resetTimer}>\r\n          reset\r\n        </div>\r\n        <audio id=\"beep\">\r\n          <source src={Bell} type=\"audio/mpeg\" />\r\n          Your browser does not support the audio element.\r\n        </audio>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { BreakInterval } from \"./BreakInterval\";\nimport { SessionLength } from \"./SessionLength\";\nimport { Timer } from \"./Timer\";\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(() => 5);\n  const [sessionLength, setSessionLength] = useState(() => 25);\n\n  const [timerMin, setTimerMin] = useState(() => 25);\n\n  function onIncreseBreakLength() {\n    setBreakLength((prevState) => prevState + 1);\n  }\n\n  function onDecreaseBreakLength() {\n    setBreakLength((prevState) => prevState - 1);\n  }\n\n  function onIncreseSessionLength() {\n    setSessionLength((prevState) => prevState + 1);\n    setTimerMin((prevState) => prevState + 1);\n  }\n\n  function onDecreaseSessionLength() {\n    setSessionLength((prevState) => prevState - 1);\n    setTimerMin((prevState) => prevState - 1);\n  }\n\n  function onUpdateTimerMin() {\n    setTimerMin((prevState) => prevState - 1);\n  }\n\n  function onToggleInterval(isSession) {\n    if (isSession) {\n      setTimerMin(breakLength);\n    } else {\n      setTimerMin(sessionLength);\n    }\n  }\n\n  function onResetTimer() {\n    setSessionLength(25);\n    setTimerMin(25);\n    setBreakLength(5);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>25 + 5 Clock</h1>\n      <div id=\"settings\">\n        <BreakInterval\n          breakInterval={breakLength}\n          increaseBreak={onIncreseBreakLength}\n          decreaseBreak={onDecreaseBreakLength}\n        />\n        <SessionLength\n          sessionLength={sessionLength}\n          increaseSession={onIncreseSessionLength}\n          decreaseSession={onDecreaseSessionLength}\n        />\n      </div>\n      <Timer\n        timerMin={timerMin}\n        breakLength={breakLength}\n        updateTimerMin={onUpdateTimerMin}\n        toggleInterval={onToggleInterval}\n        resetTimer={onResetTimer}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}